<project name="PhraseMatrix" default="dist" basedir=".">





  <description>Phrase Matrix SAAS Build</description>

  <!-- set global properties for this build -->
  <property name="src"   location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>





  <target name="init" description="Initialization steps">

    <echo></echo>
    <echo>Initialization</echo>
    <echo> - Timestamp</echo>

    <tstamp/>


    <echo> - Create the build directory tree</echo>

    <mkdir dir="${build}"/>
    <mkdir dir="${build}/logs"/>

  </target>





  <target name="compile" depends="init" description="Compile the source">

    <!-- Compile the java code from ${src} into ${build} -->
    <!-- <javac srcdir="${src}" destdir="${build}"/> -->

    <echo></echo>
    <echo>Test builds</echo>
    <echo> - Erlang</echo>

    <exec executable="make" output="build/logs/initialrebarmake.xml" dir="/var/lib/jenkins/jobs/scutil/workspace/src">
      <arg line="" />
    </exec>

    <exec executable="make" output="build/logs/testrebarmake.xml" dir="/var/lib/jenkins/jobs/scutil/workspace/src">
      <arg line="test" />
    </exec>

  </target>





  <!-- thank you http://stephen.rees-carter.net/2011/05/jenkins-ci-jslint-javascript-quality-checking/ -->

  <target name="test" depends="compile" description="Test the binaries and scripts">


    <fileset dir="client" id="jsfiles.raw">
      <include name="**/*.js" />
      <exclude name="**/*.min.js" />
    </fileset>

    <pathconvert pathsep=" " property="jsfiles.clean" refid="jsfiles.raw" />



    <echo></echo>
    <echo>Running lint</echo>
    <echo> - Javascript</echo>

    <exec executable="java" output="build/logs/jslint.xml">
      <arg line="-jar /usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0/jre/lib/ext/jslint4java/201/jslint4java-2.0.1/jslint4java-2.0.1.jar --browser --report xml ${jsfiles.clean}" />
    </exec>


    <echo> - CSS</echo>
    <fileset dir="client" id="cssfiles.raw">
      <include name="**/*.css" />
    </fileset>

    <pathconvert pathsep=" " property="cssfiles.clean" refid="cssfiles.raw" /> <!-- should separator be a comma here or smth? didn't do multifile ##TODO -->

    <exec executable="java" output="build/logs/csslint.xml">
      <arg line="-jar /usr/share/java/js.jar /erlanginst/csslint/stubbornella-csslint-1147557/release/csslint-rhino.js --format=lint-xml ${cssfiles.clean}" />
    </exec>


  </target>





  <target name="docs" depends="test" description="Compile the docs">

    <!-- Compile the java code from ${src} into ${build} -->
    <!-- <javac srcdir="${src}" destdir="${build}"/> -->

    <echo></echo>
    <echo>Generating docs</echo>
    <echo> - Erlang</echo>

    <exec executable="make" output="build/logs/docsphrasematrixmake.xml" dir="/var/lib/jenkins/jobs/scutil/workspace/src">
      <arg line="docs" />
    </exec>

  </target>





  <target name="dist" depends="docs" description="Generate the distribution">


    <echo></echo>
    <echo>Building production erlang</echo>
    <echo> - Compile</echo>

    <exec executable="make" output="build/logs/rebarmake.xml" dir="/var/lib/jenkins/jobs/scutil/workspace/src">
      <arg line="" />
    </exec>

<!--
    <echo></echo>
    <echo>Erlang docs</echo>
    <echo> - Removing old docs</echo>

    <delete><fileset dir  = "/var/www/devdocs/mochiweb"/></delete>
    <delete><fileset dir  = "/var/www/devdocs/phrasematrix"/></delete>
    <delete><fileset file = "/var/www/devdocs/index.html"/></delete>

    <echo> - Copying new erlang docs</echo>

    <copy tofile="/var/www/devdocs/index.html">
      <fileset file="/var/lib/jenkins/jobs/PhraseMatrix/workspace/misc/devdocs/index.html"/>
    </copy>

    <copy todir="/var/www/devdocs/phrasematrix">
      <fileset dir="/var/lib/jenkins/jobs/PhraseMatrix/workspace/server/erl/doc"/>
    </copy>

    <copy todir="/var/www/devdocs/mochiweb">
      <fileset dir="/var/lib/jenkins/jobs/PhraseMatrix/workspace/server/erl/deps/mochiweb/doc"/>
    </copy>
-->

    <!-- Create the distribution directory -->
    <!-- <mkdir dir="${dist}/lib"/> -->

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <!-- <jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}"/> -->

  </target>





  <target name="clean" description="Clean up">

    <!-- Delete the ${build} and ${dist} directory trees -->

    <echo></echo>
    <echo>Clean up</echo>
    <echo> - Removing build directory</echo>

    <delete dir="${build}"/>

    <echo> - Removing dist directory</echo>
    <delete dir="${dist}"/>

  </target>





</project>